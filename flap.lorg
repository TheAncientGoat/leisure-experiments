* Chat

[[org:state/userName]]
[[org:canvas]]
[[org:state/controlbox]]
[[org:game]]
[[org:ticking]]

* Data
:properties:
:note: sidebar
:end:

#+NAME: game
#+BEGIN_SRC yaml :flowLevel 2
type: lazyworld
world:
  x: 0
  pipes:
    - {y: 200,x: 250}
    - {y: 150,x: 400}
    - {y: 250,x: 550}
  players:
    - {
        id: 0,
        y: 200,
        yv: 0,
        name: 'Zombie',
        color: 'rgba(255,0,0,1)',
        alive: true,
        immortality : 2
      }
#+END_SRC

#+NAME: tickState
#+BEGIN_SRC yaml :flowLevel 2
type: ticking
ticking: false
#+END_SRC

#+NAME: state
#+BEGIN_SRC yaml :local
type: state
chatLine: ''
userName: Anon
#+END_SRC

#+NAME: canvas
#+BEGIN_SRC yaml :local
type: canvas
#+END_SRC

This is a kluge to react to a ticking update
#+BEGIN_SRC html :defview ticking
<script>Leisure.renderCanvas()</script>
#+END_SRC

#+BEGIN_SRC html :defview lazyworld
<div>
  <div>
    {{#each world.players}}
      <div style="color:{{this.color}}">
        {{this.name}}:{{this.score}}
      </div>
    {{/each}}
  </div>
</div>
<script>Leisure.renderCanvas()</script>
#+END_SRC

#+BEGIN_SRC html :defview state/userName
  <label> Name:</label><input placeholder="Name" data='userName'>{{{bind}}}
#+END_SRC

#+BEGIN_SRC html :defview canvas
<canvas id="gamecanvas" style="background-color:rgb(150,150,255); width:250px; height:400px"></canvas>


<script>
  Leisure.initWorld();
  Leisure.findViews('canvas')
    .find('#gamecanvas')
    .attr("contentEditable", "true")
    .prop('contentEditable', true);
</script>
#+END_SRC

#+BEGIN_SRC html :defview state/controlbox
<div>
  <button id='chatbutton' onclick='Leisure.flap()'>Flap</button>
  <button id='tickbutton' onclick='Leisure.tick()'>Start</button>
</div>
#+END_SRC

#+BEGIN_SRC coffeescript :results def
flap_power = 10
gap_size = 80
speed = 5
spacing = 150
gravity = -0.91
tickspeed = 50

{
  getDataNamed,
  setDataNamed,
  findViews,
} = Leisure

gen_color = (id)->
  console.log(id)
  "rgb("+(id*25)*(id%2)+","+id*25*(id%3)+","+id*25*(id%5)+")"

make_user = (id,y,yv,name,color, alive, score, immortality) ->
  console.log(color)
  if not color
    color = 'rgb(255,0,0)'
  {id:id ,y:y ,yv:yv ,name:name ,color:color,
   alive:alive,score:score,immortality:immortality}

Leisure.initWorld = ->
  gamecanvas = findViews('canvas')
    .find('#gamecanvas')
    .attr("contentEditable", "true")
    .prop('contentEditable', true)
    .focus()[0]
  gamecanvas.width = 250;
  gamecanvas.height = 400;

Leisure.flap = ->
  {userName, userId} = state = getDataNamed 'state'
  changedState = false
  game = getDataNamed 'game'
  if !userId
    userId = game.world.players.length
    user = make_user userId,200,0,name,gen_color(userId), true, 0, 1
    game.world.players.push(user)
    state.userId = userId
    setDataNamed 'state', state
  else
    user = game.world.players[userId]
    user.yv = -flap_power
    game.world.players[userId] = user
  setDataNamed 'game', game

Leisure.tick = ->
  data = getDataNamed 'tickState'
  if data.ticking
    data.ticking = false
    setDataNamed 'tickState', data
  else
    data.ticking = true
    setDataNamed 'tickState', data
    doTick()

doTick = (data)->
  tick = getDataNamed 'tickState'
  if tick.ticking
    data = getDataNamed 'game'
    gamecanvas = findViews('canvas').find('#gamecanvas')[0]
    data.world = simulate_world(gamecanvas, data.world)
    #render_world(gamecanvas, data.world)
    #window.setTimeout (-> setDataNamed 'game', data), 55
    setDataNamed 'game', data
    window.setTimeout doTick, tickspeed

Leisure.renderCanvas = ->
  gamecanvas = findViews('canvas').find('#gamecanvas')[0]
  if getDataNamed('tickState').ticking
    data = getDataNamed 'game'
    render_world gamecanvas, data.world
  else
    ctx = gamecanvas.getContext '2d'
    ctx.clearRect(0,0,gamecanvas.width,gamecanvas.height)

render_world = (gamecanvas, world)->
  ctx = gamecanvas.getContext '2d'
  x = world.x
  pipes = world.pipes
  players = world.players
  ctx.clearRect(0,0,gamecanvas.width,gamecanvas.height)
  ctx.fillStyle ='rgba(100,255,100,1)'
  ctx.fillRect(0,gamecanvas.height-50,gamecanvas.width,50)

  ctx.fillStyle ='rgba(10,255,10,1)'
  pipes.forEach (pipe)->
    ctx.fillRect(pipe.x,0,50,pipe.y)
    ctx.fillRect(pipe.x,pipe.y+gap_size,50,gamecanvas.height-(pipe.y+gap_size))

  players.forEach (player)->
    if player.alive
      ctx.fillStyle = player.color
      ctx.fillText(player.name + ' ' + player.score,50,player.y-15)
      ctx.fillRect(50,player.y,15,15)
      if player.immortality > 0
        ctx.fillText('shield',50,player.y+30)
    else
      ctx.fillStyle = player.color
      ctx.fillText(player.name,50,player.y-15)
      ctx.fillRect(pipes[0].x,player.y,15,15)

simulate_world = (gamecanvas, world)->
  world.x += speed
  world.players.forEach (player)->
    if player.alive
      player.yv = player.yv - gravity
      player.y += player.yv
      player.immortality -= tickspeed/1000
      if (world.pipes[0].x < 65 && world.pipes[0].x > 0) &&
      (player.y + 15 > world.pipes[0].y + gap_size ||
       player.y < world.pipes[0].y)

        if player.immortality < 0
          player.alive = false
    else
      player.yv = 0

  if world.pipes[0].x < 0 - gap_size
      console.log('removing pipe')
      world.pipes.shift()
      world.pipes.push({x:world.pipes[world.pipes.length-1].x+spacing,
      y:Math.random()*(gamecanvas.height-150)+50})
      world.players.forEach (player)->
        player.score += 1
        #Respawn the player
        if not player.alive
          player.alive = true
          player.y = 200
          player.score = 0
          player.immortality = 2
  world.pipes.forEach (pipe)->
    pipe.x -= speed

  world

#+END_SRC
* Chat

[[org:game]][[org:view]][[org:controls]]

* Data
:properties:
:note: sidebar
:end:

#+NAME: game
#+BEGIN_SRC yaml :flowLevel 2
type: lazyworld
world:
  x: 0
  pipes:
    - {y: 200,x: 250}
    - {y: 150,x: 400}
    - {y: 250,x: 550}
  players:
    - {
        id: 0,
        y: 200,
        yv: 0,
        name: 'Zombie',
        color: 'rgba(255,0,0,1)',
        alive: true,
        immortality : 2
      }

#+END_SRC

#+NAME: view
#+BEGIN_SRC yaml :local
type: canvasview
#+END_SRC

#+NAME: controls
#+BEGIN_SRC yaml :local
type: controlbox
chatLine: ''
userName: Anon
#+END_SRC

#+BEGIN_SRC html :defview lazyworld

<div>
  <div>
    {{#each world.players}}
      <div style="color:{{this.color}}">
        {{this.name}}:{{this.score}}
      </div>
    {{/each}}
  </div>
  <label> Name:</label><input placeholder="Name" id='nameinput'>
</div>
<script>$(document.currentScript.parentNode).find('#nameinput').val(Leisure.userName)</script>
#+END_SRC

#+BEGIN_SRC html :defview canvasview
<canvas id="gamecanvas" style="background-color:rgb(150,150,255); width:250px; height:400px"></canvas>


<script>
  Leisure.initWorld()

  $(document.currentScript.parentNode).find('#gamecanvas').attr("contentEditable", "true")
  $(document.currentScript.parentNode).find('#gamecanvas')[0].contentEditable = true
</script>
#+END_SRC

#+BEGIN_SRC html :defview controlbox
<div>
  <button id='chatbutton' onclick='Leisure.flap()'>Flap</button>
  <button id='tickbutton' onclick='Leisure.tick()'>Start</button>
</div>
#+END_SRC

#+BEGIN_SRC coffeescript :results def

Leisure.userName = 'Anon'
id = 0
unregistered = true
flap_power = 10
gap_size = 80
speed = 5
spacing = 150
gravity = -0.91
tickspeed = 50

gen_color = (id)->
  console.log(id)
  "rgb("+(id*25)*(id%2)+","+id*25*(id%3)+","+id*25*(id%5)+")"

make_user = (id,y,yv,name,color, alive, score, immortality) ->
  console.log(color)
  if not color
    color = 'rgb(255,0,0)'
  {id:id ,y:y ,yv:yv ,name:name ,color:color,alive:alive,score:score,immortality:immortality}

Leisure.initWorld = ->
  gamecanvas = $(Templating.currentView).find('#gamecanvas')[0]
  gamecanvas.width = 250;
  gamecanvas.height = 400;
  inputId = $("[data-view-link='game']").attr 'data-view-id'

  #$(Templating.currentView).keypress (e)->
  Leisure.flap = ->
    name = Leisure.userName = $($("[data-view-link='game']")[0].shadowRoot.firstChild).find('input').val()
    block = Leisure.getBlock(inputId)
    data = block.yaml
    date = new Date()
    if unregistered
      id = block.yaml.world.players.length
      user = make_user id,200,0,name,gen_color(id), true, 0, 1
      block.yaml.world.players.push(user)
      unregistered = false
    else
      user = block.yaml.world.players[id]
      user.yv = -flap_power
      block.yaml.world.players[id] = user


    Leisure.setData block._id, data



  Leisure.tick = ->
    block = Leisure.getBlock(inputId)
    data = block.yaml
    data.world = simulate_world(data.world)
    render_world(data.world)
    window.setTimeout ->
    Leisure.setData block._id, data
    , 55
    window.setTimeout(Leisure.tick,tickspeed)



  render_world = (world)->
    gamecanvas = $($("[data-view-link='view']")[0].shadowRoot.firstChild).find('#gamecanvas')[0]
    $(gamecanvas).attr("contentEditable", "true")
    gamecanvas.contentEditable = true
    $(gamecanvas).focus()

    ctx = gamecanvas.getContext '2d'
    x = world.x
    pipes = world.pipes
    players = world.players
    ctx.clearRect(0,0,gamecanvas.width,gamecanvas.height)
    ctx.fillStyle ='rgba(100,255,100,1)'
    ctx.fillRect(0,gamecanvas.height-50,gamecanvas.width,50)

    ctx.fillStyle ='rgba(10,255,10,1)'
    pipes.forEach (pipe)->
      ctx.fillRect(pipe.x,0,50,pipe.y)
      ctx.fillRect(pipe.x,pipe.y+gap_size,50,gamecanvas.height-(pipe.y+gap_size))

    players.forEach (player)->
      if player.alive
        ctx.fillStyle = player.color
        ctx.fillText(player.name + ' ' + player.score,50,player.y-15)
        ctx.fillRect(50,player.y,15,15)
        if player.immortality > 0
          ctx.fillText('shield',50,player.y+30)
      else
        ctx.fillStyle = player.color
        ctx.fillText(player.name,50,player.y-15)
        ctx.fillRect(pipes[0].x,player.y,15,15)

  simulate_world = (world)->
    world.x += speed
    world.players.forEach (player)->
      if player.alive
        player.yv = player.yv - gravity
        player.y += player.yv
        player.immortality -= tickspeed/1000
        if (world.pipes[0].x < 65 && world.pipes[0].x > 0) &&
        (player.y + 15 > world.pipes[0].y + gap_size || player.y < world.pipes[0].y)

          if player.immortality < 0
            player.alive = false
      else
        player.yv = 0

    if world.pipes[0].x < 0 - gap_size
        console.log('removing pipe')
        world.pipes.shift()
        world.pipes.push({x:world.pipes[world.pipes.length-1].x+spacing,y:Math.random()*(gamecanvas.height-150)+50})
        world.players.forEach (player)->
          player.score += 1
          #Respawn the player
          if not player.alive
            player.alive = true
            player.y = 200
            player.score = 0
            player.immortality = 2
    world.pipes.forEach (pipe)->
      pipe.x -= speed

    world

#+END_SRC
